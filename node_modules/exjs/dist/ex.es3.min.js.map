{"version":3,"sources":["src/_version.ts","src/polyfill/Array_isArray.ts","src/enumerable.ts","src/map/map.es3.ts","src/anonymous.ts","src/append.ts","src/apply.ts","src/array.ts","src/concat.ts","src/distinct.ts","src/except.ts","src/fromJson.ts","src/groupBy.ts","src/intersect.ts","src/join.ts","src/list.ts","src/orderBy.ts","src/prepend.ts","src/range.ts","src/reverse.ts","src/round.ts","src/select.ts","src/selector.ts","src/skip.ts","src/take.ts","src/traverse.ts","src/union.ts","src/where.ts","src/wrap.ts","src/zip.ts"],"names":["exjs","version","Array","isArray","arg","Object","prototype","toString","call","Enumerable","getEnumerator","moveNext","current","undefined","aggregate","seed","accumulator","active","enumerator","this","all","predicate","e","i","any","append","items","_i","arguments","length","Error","apply","action","at","index","average","selector","count","total","t","concat","second","difference","comparer","f2","s2","en","intersection","intersect","toArray","aNotB","except","bNotA","distinct","first","match","firstIndex","forEach","groupBy","keySelector","join","inner","outerKeySelector","innerKeySelector","resultSelector","last","l","lastIndex","j","max","Math","min","orderBy","orderByDescending","prepend","reverse","select","selectMany","skip","skipWhile","standardDeviation","avg","sum","diff","sqrt","take","takeWhile","traverse","traverseUnique","matcher","arr","push","toMap","valueSelector","toList","union","where","filter","zip","Map3","enumerable","size","_keys","_values","enu","Function","set","clear","key","indexOf","splice","entries","_this","range","callbackFn","thisArg","keys","vals","len","get","has","value","values","m","List","_global","Map","window","global","anonymous","iterator","appendEnumerator","prev","firstit","secondit","stage","applyEnumerator","arrayEnumerator","ArrayEnumerable","_super","slice","__extends","defineProperty","writable","configurable","concatEnumerator","s","distinctEnumerator","visited","hit","exceptEnumerator","f","x","fromJson","o","mappingOverrides","mapSubProperty","mapping","rv","mapped","$jsonMappings","groupByEnumerator","grps","createGroups","k1","k2","grp","Group","_add","_arr","intersectEnumerator","joinEnumerator","ins","cur","__","constructor","toLocaleString","pop","shift","start","end","sort","compareFn","unshift","searchElement","fromIndex","lastIndexOf","every","callbackfn","some","map","reduce","initialValue","reduceRight","remove","item","removeWhere","p","hasOwnProperty","list","removed","orderByEnumerable","source","isDescending","OrderedEnumerable","keyComparer","Source","factor","Sorter","a","b","sorter","thenBy","ThenEnumerable","thenByDescending","parentSorter","thisSorter","fn","prependEnumerator","rangeEnumerator","increment","reverseEnumerator","round","digits","pow","selectEnumerator","selectManyEnumerator","selectorEnumerator","obj","skipEnumerator","skipWhileEnumerator","takeEnumerator","takeWhileEnumerator","traverseEnumerator","started","enstack","traverseUniqueEnumerator","turnstile","existing","unionEnumerator","whereEnumerator","c","wrapEnumerator","wrapped","ex","zipEnumerator"],"mappings":"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","file":"ex.es3.min.js","sourcesContent":["namespace exjs {\n    export var version = '0.5.1';\n}","namespace exjs {\r\n    if (!Array.isArray) {\r\n        Array.isArray = function (arg): arg is Array<any> {\r\n            return Object.prototype.toString.call(arg) === '[object Array]';\r\n        };\r\n    }\r\n}","namespace exjs {\r\n    export interface IProjectionFunc<T, TResult> {\r\n        (t: T): TResult;\r\n    }\r\n    export interface IProjectionIndexFunc<T, TResult> {\r\n        (t: T, index: number): TResult;\r\n    }\r\n    export interface IEnumerable<T> {\r\n        getEnumerator(): IEnumerator<T>;\r\n    }\r\n    export interface IEnumerableEx<T> extends IEnumerable<T> {\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate;\r\n        all(predicate: IProjectionFunc<T, boolean>): boolean;\r\n        all(predicate: IProjectionIndexFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionIndexFunc<T, boolean>): boolean;\r\n        append(...items: T[]): IEnumerableEx<T>;\r\n        apply<T>(action: IProjectionFunc<T, any>): IEnumerableEx<T>;\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T>;\r\n        at(index: number): T;\r\n        average(selector?: (t: T) => number): number;\r\n        concat(second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat(second: T[]): IEnumerableEx<T>;\r\n        count(predicate?: (t: T) => boolean): number;\r\n        difference(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference(second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        distinct(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        first(match?: (t: T) => boolean): T;\r\n        firstIndex(match?: (t: T) => boolean): number;\r\n        forEach (action: (t: T) => any);\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>>;\r\n        intersect(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        last(match?: (t: T) => boolean): T;\r\n        lastIndex(match?: (t: T) => boolean): number;\r\n        max(selector?: (t: T) => number): number;\r\n        min(selector?: (t: T) => number): number;\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        prepend(...items: T[]): IEnumerableEx<T>;\r\n        reverse(): IEnumerableEx<T>;\r\n        select<TResult>(selector: IProjectionFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        skip(count: number): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        standardDeviation(selector?: (t: T) => number): number;\r\n        sum(selector?: (t: T) => number): number;\r\n        take(count: number): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        toArray(): T[];\r\n        toList(): IList<T>;\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue>;\r\n        //toDictionary();\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => T[], matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        union(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        where(filter: (t: T) => boolean): IEnumerableEx<T>;\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n    }\r\n    export interface IEnumerator<T> {\r\n        current: T;\r\n        moveNext(): boolean;\r\n    }\r\n\r\n    export interface IOrderedEnumerable<T> extends IEnumerableEx<T> {\r\n        thenBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        thenByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n    }\r\n\r\n    export interface IGrouping<TKey, TElement> extends IEnumerableEx<TElement> {\r\n        key: TKey;\r\n    }\r\n\r\n    export interface IDifference<T> {\r\n        intersection: IEnumerableEx<T>;\r\n        aNotB: IEnumerableEx<T>;\r\n        bNotA: IEnumerableEx<T>;\r\n    }\r\n\r\n    export interface IList<T> extends IEnumerableEx<T> {\r\n        //Array<T> methods\r\n        toString(): string;\r\n        toLocaleString(): string;\r\n        pop(): T;\r\n        push(...items: T[]): number;\r\n        shift(): T;\r\n        slice(start: number, end?: number): T[];\r\n        sort(compareFn?: (a: T, b: T) => number): T[];\r\n        splice(start: number): T[];\r\n        splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n        unshift(...items: T[]): number;\r\n        indexOf(searchElement: T, fromIndex?: number): number;\r\n        lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n        reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        /**\r\n         * Removes item from list.\r\n         * @param item - item to remove\r\n         */\r\n        remove(item: T): boolean;\r\n        /**\r\n         * Removes items that match predicate.\r\n         * Returns items that were removed.\r\n         * @param predicate - function to match items that should be removed (index parameter is based on original list)\r\n         */\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T>;\r\n    }\r\n\r\n    export class Enumerable<T> implements IEnumerableEx<T> {\r\n        constructor () {\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            return {\r\n                moveNext: function () {\r\n                    return false;\r\n                },\r\n                current: undefined\r\n            };\r\n        }\r\n\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate {\r\n            var active = seed;\r\n            for (var enumerator = this.getEnumerator(); enumerator.moveNext();) {\r\n                active = accumulator(active, enumerator.current);\r\n            }\r\n            return active;\r\n        }\r\n\r\n        all (predicate: IProjectionIndexFunc<T, boolean>): boolean {\r\n            if (predicate) {\r\n                var e = this.getEnumerator();\r\n                var i = 0;\r\n                while (e.moveNext()) {\r\n                    if (!predicate(e.current, i))\r\n                        return false;\r\n                    i++;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        any (predicate?: IProjectionIndexFunc<T, boolean>): boolean {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (!predicate)\r\n                    return true;\r\n                if (predicate(e.current, i))\r\n                    return true;\r\n                i++;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        append(...items: T[]): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        at (index: number): T {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (i === index)\r\n                    return e.current;\r\n                i++;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        average (selector?: (t: T) => number): number {\r\n            var count = 0;\r\n            var total = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                total += selector(e.current);\r\n                count++;\r\n            }\r\n            if (count === 0) return 0;\r\n            return total / count;\r\n        }\r\n\r\n        concat (second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat (second: T[]): IEnumerableEx<T>;\r\n        concat (second: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        count (predicate?: (t: T) => boolean): number {\r\n            var count = 0;\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!predicate || predicate(e.current))\r\n                    count++;\r\n            }\r\n            return count;\r\n        }\r\n\r\n        difference (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: any, comparer?: (f: T, s: T) => boolean): IDifference<T> {\r\n            comparer = comparer || function (f2: T, s2: T) {\r\n                    return f2 === s2;\r\n                };\r\n            if (second instanceof Array)\r\n                second = second.en();\r\n            return {\r\n                intersection: this.intersect(second, comparer).toArray().en(),\r\n                aNotB: this.except(second, comparer).toArray().en(),\r\n                bNotA: second.except(this, comparer).toArray().en()\r\n            };\r\n        }\r\n\r\n        distinct (comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        except (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        first (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    return e.current;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        firstIndex (match?: (t: T) => boolean): number {\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        forEach (action: (t: T) => any) {\r\n            for (var en = this.getEnumerator(); en.moveNext();) {\r\n                action(en.current);\r\n            }\r\n        }\r\n\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        intersect (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        last (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            var l: T;\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    l = e.current;\r\n            }\r\n            return l;\r\n        }\r\n\r\n        lastIndex (match?: (t: T) => boolean): number {\r\n            var j = -1;\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    j = i;\r\n            }\r\n            return j;\r\n        }\r\n\r\n        max (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var max = selector(e.current);\r\n            while (e.moveNext()) {\r\n                max = Math.max(max, selector(e.current));\r\n            }\r\n            return max;\r\n        }\r\n\r\n        min (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var min = selector(e.current);\r\n            while (e.moveNext()) {\r\n                min = Math.min(min, selector(e.current));\r\n            }\r\n            return min;\r\n        }\r\n\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        prepend(...items: T[]): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        reverse(): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skip (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skipWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        standardDeviation (selector?: (t: T) => number): number {\r\n            var avg = this.average(selector);\r\n            var sum = 0;\r\n            var count = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                var diff = selector(e.current) - avg;\r\n                sum += (diff * diff);\r\n                count++;\r\n            }\r\n            return Math.sqrt(sum / count);\r\n        }\r\n\r\n        sum (selector?: (t: T) => number): number {\r\n            var sum = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                sum += selector(e.current);\r\n            }\r\n            return sum;\r\n        }\r\n\r\n        take (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        takeWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverse (selector: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverseUnique (selector: (t: T) => T[], uniqueMatch?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toArray (): T[] {\r\n            var arr: T[] = [];\r\n            var enumerator = this.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                arr.push(enumerator.current);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toList (): IList<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        //toDictionary() {\r\n        //}\r\n\r\n        union (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        where (filter: (t: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n    }\r\n}","/// <reference path=\"../enumerable.ts\" />\r\n\r\ndeclare var global;\r\n\r\nnamespace exjs {\r\n    export class Map3<TKey, TValue> implements IMap<TKey, TValue> {\r\n        size: number = 0;\r\n        private _keys: TKey[] = [];\r\n        private _values: TValue[] = [];\r\n\r\n        constructor();\r\n        constructor(enumerable: any[][]);\r\n        constructor(enumerable: IEnumerable<any[]>);\r\n        constructor(enumerable?: any) {\r\n            var enu: IEnumerable<any[]>;\r\n            if (enumerable instanceof Array) {\r\n                enu = (<Array<any[]>>enumerable).en();\r\n            } else if (enumerable && enumerable.getEnumerator instanceof Function) {\r\n                enu = <IEnumerable<any[]>>enumerable;\r\n            }\r\n\r\n            if (!enu)\r\n                return;\r\n            for (var en = enu.getEnumerator(); en && en.moveNext();) {\r\n                this.set(en.current[0], en.current[1]);\r\n            }\r\n        }\r\n\r\n        clear() {\r\n            this._keys.length = 0;\r\n            this._values.length = 0;\r\n            this.size = 0;\r\n        }\r\n\r\n        delete(key: TKey): boolean {\r\n            var index = this._keys.indexOf(key);\r\n            if (!(index > -1))\r\n                return false;\r\n            this._keys.splice(index, 1);\r\n            this._values.splice(index, 1);\r\n            this.size--;\r\n            return true;\r\n        }\r\n\r\n        entries(): IEnumerableEx<any[]> {\r\n            return exjs.range(0, this.size).select(i => [this._keys[i], this._values[i]]);\r\n        }\r\n\r\n        forEach(callbackFn: (value: TValue, key: TKey, map?: IMap<TKey, TValue>) => void, thisArg?: any) {\r\n            if (thisArg == null)\r\n                thisArg = this;\r\n            for (var i = 0, keys = this._keys, vals = this._values, len = keys.length; i < len; i++) {\r\n                callbackFn.call(thisArg, vals[i], keys[i], this);\r\n            }\r\n        }\r\n\r\n        get(key: TKey): TValue {\r\n            var index = this._keys.indexOf(key);\r\n            return this._values[index];\r\n        }\r\n\r\n        has(key: TKey): boolean {\r\n            return this._keys.indexOf(key) > -1;\r\n        }\r\n\r\n        keys(): IEnumerableEx<TKey> {\r\n            return this._keys.en();\r\n        }\r\n\r\n        set(key: TKey, value: TValue): any {\r\n            var index = this._keys.indexOf(key);\r\n            if (index > -1) {\r\n                this._values[index] = value;\r\n            } else {\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this.size++;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        values(): IEnumerableEx<TValue> {\r\n            return this._values.en();\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.toMap = function<T, TKey, TValue> (keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): Map3<TKey, TValue> {\r\n        var m = new Map3<TKey, TValue>();\r\n        for (var en = this.getEnumerator(); en.moveNext();) {\r\n            m.set(keySelector(en.current), valueSelector(en.current));\r\n        }\r\n        return m;\r\n    };\r\n    if (List)\r\n        List.prototype.toMap = Enumerable.prototype.toMap;\r\n}\r\n\r\n(function (_global) {\r\n    if (!_global.Map)\r\n        _global.Map = exjs.Map3;\r\n})(typeof window === \"undefined\" ? global : window);\r\n","namespace exjs {\n    export function anonymous<T>(iterator: (en: IEnumerator<T>) => boolean): IEnumerableEx<T> {\n        var enumerable = new Enumerable<T>();\n        enumerable.getEnumerator = () => {\n            var enumerator = {\n                current: undefined,\n                moveNext: () => iterator(enumerator)\n            };\n            return enumerator;\n        };\n        return enumerable;\n    }\n}","/// <reference path=\"enumerable.ts\" />\n\nnamespace exjs {\n    function appendEnumerator<T>(prev: IEnumerable<T>, items: T[]): IEnumerator<T> {\n        var stage = 1;\n        var firstit: IEnumerator<T>;\n        var secondit: IEnumerator<T>;\n        var e = {\n            current: undefined,\n            moveNext: function (): boolean {\n                if (stage < 2) {\n                    firstit = firstit || prev.getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n\n                secondit = secondit || items.en().getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n\n    Enumerable.prototype.append = function<T>(...items: T[]): IEnumerableEx<T> {\n        var e = new Enumerable<T>();\n        e.getEnumerator = () => appendEnumerator<T>(<IEnumerable<T>>this, items);\n        return e;\n    };\n    if (List)\n        List.prototype.append = Enumerable.prototype.append;\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function applyEnumerator<T>(prev: IEnumerable<T>, action: IProjectionIndexFunc<T, any>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                action(e.current = t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.apply = function<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => applyEnumerator(<IEnumerable<T>>this, action);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.apply = Enumerable.prototype.apply;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\ninterface Array<T> {\r\n    en(): exjs.IEnumerableEx<T>;\r\n}\r\n\r\nnamespace exjs {\r\n    function arrayEnumerator<T>(arr: T[]): IEnumerator<T> {\r\n        var len = arr.length;\r\n        var e = {moveNext: undefined, current: undefined};\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = arr[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    }\r\n\r\n    class ArrayEnumerable<T> extends Enumerable<T> {\r\n        constructor(arr: T[]) {\r\n            super();\r\n\r\n            this.getEnumerator = function () {\r\n                return arrayEnumerator(arr);\r\n            };\r\n            this.toArray = function () {\r\n                return arr.slice(0);\r\n            };\r\n        }\r\n    }\r\n\r\n    function en<T>(): IEnumerableEx<T> {\r\n        if (this && Array.isArray(this))\r\n            return new ArrayEnumerable<T>(this);\r\n        return new Enumerable<T>();\r\n    }\r\n\r\n    try {\r\n        Object.defineProperty(Array.prototype, \"en\", {\r\n            value: en,\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: false\r\n        });\r\n    } catch (e) {\r\n        //IE8 supports Object.defineProperty only for DOM objects\r\n        (<any>Array.prototype).en = en;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function concatEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var s = false;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (t.moveNext()) {\r\n                    e.current = t.current;\r\n                    return true;\r\n                }\r\n                if (s) return false;\r\n                s = true;\r\n                t = second.getEnumerator();\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.concat = function<T>(second: any): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => concatEnumerator<T>(<IEnumerable<T>>this, en);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.concat = Enumerable.prototype.concat;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function distinctEnumerator<T>(prev: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var visited = [];\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (!comparer) {\r\n                    while (t.moveNext()) {\r\n                        if (visited.indexOf(t.current) < 0) {\r\n                            visited.push(e.current = t.current);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                while (t.moveNext()) {\r\n                    for (var i = 0, len = visited.length, hit = false; i < len && !hit; i++) {\r\n                        hit = !!comparer(visited[i], t.current);\r\n                    }\r\n                    if (!hit) {\r\n                        visited.push(e.current = t.current);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.distinct = function<T>(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => distinctEnumerator(<IEnumerable<T>>this, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.distinct = Enumerable.prototype.distinct;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function exceptEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.except = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => exceptEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.except = Enumerable.prototype.except;\r\n} ","interface Function {\r\n    fromJson<T>(o: any, mappingOverrides?: any): T;\r\n}\r\n\r\nFunction.prototype.fromJson = function<T>(o: any, mappingOverrides?: any): T {\r\n    var rv = new this();\r\n    if (o == null)\r\n        return rv;\r\n\r\n    var mapped: string[] = [];\r\n\r\n    for (var key in mappingOverrides) {\r\n        var j = mapSubProperty(o[key], mappingOverrides[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in this.$jsonMappings) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        var j = mapSubProperty(o[key], this.$jsonMappings[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in o) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        rv[key] = o[key];\r\n    }\r\n\r\n    return rv;\r\n\r\n    function mapSubProperty(j: any, mapping: any): any {\r\n        if (j == null)\r\n            return j;\r\n        if (mapping instanceof Function)\r\n            return mapping(j);\r\n        if (mapping instanceof Array) {\r\n            mapping = mapping[0];\r\n            if (!(mapping instanceof Function) || !(j instanceof Array))\r\n                return undefined;\r\n            var arr = [];\r\n            for (var i = 0; i < j.length; i++) {\r\n                arr.push(mapping(j[i]));\r\n            }\r\n            return arr;\r\n        }\r\n        return undefined;\r\n    }\r\n};","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nnamespace exjs {\r\n    function groupByEnumerator<T, TKey>(prev: IEnumerable<T>, keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<IGrouping<TKey, T>> {\r\n        var grps: IGrouping<TKey, T>[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!grps) grps = createGroups<TKey, T>(prev, keySelector, comparer);\r\n                e.current = undefined;\r\n                if (i >= grps.length)\r\n                    return false;\r\n                e.current = grps[i];\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function createGroups<TKey, TElement>(prev: IEnumerable<TElement>, keySelector: (t: TElement) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IGrouping<TKey, TElement>[] {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var grps: Group<TKey, TElement>[] = [];\r\n        var keys: TKey[] = [];\r\n\r\n        var e = prev.getEnumerator();\r\n        var key: TKey;\r\n        while (e.moveNext()) {\r\n            key = keySelector(e.current);\r\n            var index = -1;\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                if (comparer(key, keys[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            var grp: Group<TKey, TElement>;\r\n            if (index < 0) {\r\n                keys.push(key);\r\n                grps.push(grp = new Group<TKey, TElement>(key));\r\n            } else {\r\n                grp = grps[index];\r\n            }\r\n            grp._add(e.current);\r\n        }\r\n\r\n        return grps;\r\n    }\r\n\r\n    class Group<TKey, TElement> extends Enumerable<TElement> implements IGrouping<TKey, TElement> {\r\n        private _arr: TElement[] = [];\r\n\r\n        constructor (public key: TKey) {\r\n            super();\r\n            this.getEnumerator = () => this._arr.en().getEnumerator();\r\n        }\r\n\r\n        _add (e: TElement) {\r\n            this._arr.push(e);\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.groupBy = function<T, TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n        var e = new Enumerable<IGrouping<TKey, T>>();\r\n        e.getEnumerator = () => groupByEnumerator<T, TKey>(<IEnumerable<T>>this, keySelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.groupBy = Enumerable.prototype.groupBy;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function intersectEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) { return f === s; };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.intersect = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => intersectEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.intersect = Enumerable.prototype.intersect;\r\n}  ","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function joinEnumerator<TOuter, TInner, TKey, TResult>(prev: IEnumerable<TOuter>, inner: IEnumerable<TInner>, outerKeySelector: (t: TOuter) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (tout: TOuter, tin: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<TResult> {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var s: IEnumerator<TOuter>;\r\n        var ins: TInner[];\r\n        var j = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!s) {\r\n                    s = prev.getEnumerator();\r\n                    if (!s.moveNext())\r\n                        return false;\r\n                    ins = en(inner).toArray();\r\n                }\r\n\r\n                var cur: TInner;\r\n                do {\r\n                    for (; j < ins.length; j++) {\r\n                        cur = ins[j];\r\n                        if (comparer(outerKeySelector(s.current), innerKeySelector(cur))) {\r\n                            j++;\r\n                            e.current = resultSelector(s.current, cur);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    j = 0;\r\n                } while (s.moveNext());\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.join = function<T,TInner,TKey,TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TInner> = inner instanceof Array ? inner.en() : inner;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => joinEnumerator<T, TInner, TKey, TResult>(<IEnumerable<T>>this, en, outerKeySelector, innerKeySelector, resultSelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.join = Enumerable.prototype.join;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"fromJson.ts\" />\r\n\r\nnamespace exjs {\r\n    Enumerable.prototype.toList = function<T>() {\r\n        var l = new List<T>();\r\n\r\n        var enumerator = this.getEnumerator();\r\n        while (enumerator.moveNext()) {\r\n            l.push(enumerator.current);\r\n        }\r\n\r\n        return <IList<T>>l;\r\n    };\r\n\r\n    export class List<T> extends Enumerable<T> implements IList<T> {\r\n        //Array<T> methods\r\n        toString (): string { throw new Error(\"Not implemented\"); }\r\n        toLocaleString (): string { throw new Error(\"Not implemented\"); }\r\n        pop (): T { throw new Error(\"Not implemented\"); }\r\n        push (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        shift (): T { throw new Error(\"Not implemented\"); }\r\n        slice (start: number, end?: number): T[] { throw new Error(\"Not implemented\"); }\r\n        sort (compareFn?: (a: T, b: T) => number): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        splice (start: number): T[];\r\n        splice (start: number, deleteCount: number, ...items: T[]): T[];\r\n        splice (): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        unshift (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        indexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        lastIndexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        every (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        some (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        forEach (callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void { throw new Error(\"Not implemented\"); }\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] { throw new Error(\"Not implemented\"); }\r\n        filter (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[] { throw new Error(\"Not implemented\"); }\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        remove(item: T): boolean { throw new Error(\"Not implemented\"); }\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> { throw new Error(\"Not implemented\"); }\r\n    }\r\n\r\n    for (var p in Array) if (Array.hasOwnProperty(p)) List[p] = Array[p];\r\n    function __ () { this.constructor = List; }\r\n    __.prototype = Array.prototype;\r\n    List.prototype = new __();\r\n    for (var key in Enumerable.prototype) {\r\n        if (key === \"getEnumerator\")\r\n            continue;\r\n        List.prototype[key] = Enumerable.prototype[key];\r\n    }\r\n\r\n    List.prototype.getEnumerator = function<T>(): IEnumerator<T> {\r\n        var list = this;\r\n        var len = list.length;\r\n        var e = { moveNext: undefined, current: undefined };\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = list[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    };\r\n    List.prototype.remove = function<T>(item: T): boolean {\r\n        return this.removeWhere(t => t === item).any();\r\n    };\r\n    List.prototype.removeWhere = function<T>(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> {\r\n        var removed = [];\r\n        var cur: T;\r\n        for (var i = this.length - 1; i >= 0; i--) {\r\n            cur = this[i];\r\n            if (predicate(cur, i) === true) {\r\n                this.splice(i, 1);\r\n                removed.push(cur);\r\n            }\r\n        }\r\n        return removed.en().reverse();\r\n    };\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function orderByEnumerable<T, TKey>(source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return new OrderedEnumerable<T, TKey>(source, keySelector, isDescending, comparer);\r\n    }\r\n\r\n    class OrderedEnumerable<T, TKey> extends Enumerable<T> implements IOrderedEnumerable<T> {\r\n        Source: IEnumerable<T>;\r\n        Sorter: (a: T, b: T) => number;\r\n\r\n        constructor (source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super();\r\n\r\n            this.Source = source;\r\n            keyComparer = keyComparer || function (f: TKey, s: TKey) {\r\n                return f > s ? 1 : (f < s ? -1 : 0);\r\n            };\r\n            var factor = (isDescending === true) ? -1 : 1;\r\n            this.Sorter = (a, b) => factor * keyComparer(keySelector(a), keySelector(b));\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            var source = this.Source;\r\n            var sorter = this.Sorter;\r\n            var arr: T[];\r\n            var i = 0;\r\n            var e = {\r\n                current: undefined,\r\n                moveNext: function (): boolean {\r\n                    if (!arr) {\r\n                        arr = en(source).toArray();\r\n                        arr.sort(sorter);\r\n                    }\r\n                    e.current = undefined;\r\n                    if (i >= arr.length)\r\n                        return false;\r\n                    e.current = arr[i];\r\n                    i++;\r\n                    return true;\r\n                }\r\n            };\r\n            return e;\r\n        }\r\n\r\n        thenBy<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, false, comparer);\r\n        }\r\n\r\n        thenByDescending<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, true, comparer);\r\n        }\r\n    }\r\n\r\n    class ThenEnumerable<T, TParentKey, TKey> extends OrderedEnumerable<T, TKey> {\r\n        constructor (source: OrderedEnumerable<T, TParentKey>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super(source, keySelector, isDescending, keyComparer);\r\n\r\n            var parentSorter = source.Sorter;\r\n            var thisSorter = this.Sorter;\r\n            this.Sorter = (a, b) => parentSorter(a, b) || thisSorter(a, b);\r\n        }\r\n    }\r\n\r\n    var fn = Enumerable.prototype;\r\n    fn.orderBy = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, false, comparer);\r\n    };\r\n    fn.orderByDescending = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, true, comparer);\r\n    };\r\n    if (List) {\r\n        List.prototype.orderBy = Enumerable.prototype.orderBy;\r\n        List.prototype.orderByDescending = Enumerable.prototype.orderByDescending;\r\n    }\r\n} ","/// <reference path=\"enumerable.ts\" />\n\nnamespace exjs {\n    function prependEnumerator<T>(prev: IEnumerable<T>, items: T[]): IEnumerator<T> {\n        var stage = 1;\n        var firstit: IEnumerator<T>;\n        var secondit: IEnumerator<T>;\n        var e = {\n            current: undefined,\n            moveNext: function (): boolean {\n                if (stage < 2) {\n                    firstit = firstit || items.en().getEnumerator();\n                    if (firstit.moveNext()) {\n                        e.current = firstit.current;\n                        return true;\n                    }\n                    stage++;\n                }\n\n                secondit = secondit || prev.getEnumerator();\n                if (secondit.moveNext()) {\n                    e.current = secondit.current;\n                    return true;\n                }\n                e.current = undefined;\n                return false;\n            }\n        };\n        return e;\n    }\n\n    Enumerable.prototype.prepend = function<T>(...items: T[]): IEnumerableEx<T> {\n        var e = new Enumerable<T>();\n        e.getEnumerator = () => prependEnumerator<T>(<IEnumerable<T>>this, items);\n        return e;\n    };\n    if (List)\n        List.prototype.prepend = Enumerable.prototype.prepend;\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function rangeEnumerator (start: number, end: number, increment: number): IEnumerator<number> {\r\n        var i = start - increment;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                i += increment;\r\n                if (i >= end)\r\n                    return false;\r\n                e.current = i;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    export function range (start: number, end: number, increment?: number): IEnumerableEx<number> {\r\n        start = start || 0;\r\n        end = end || 0;\r\n        if (start > end)\r\n            throw new Error(\"Start cannot be greater than end.\");\r\n        if (increment == null)\r\n            increment = 1;\r\n        var e = new Enumerable<number>();\r\n        e.getEnumerator = () => rangeEnumerator(start, end, increment);\r\n        return e;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function reverseEnumerator<T>(prev: IEnumerable<T>): IEnumerator<T> {\r\n        var a: T[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!a) {\r\n                    a = en(prev).toArray();\r\n                    i = a.length;\r\n                }\r\n                i--;\r\n                e.current = a[i];\r\n                return i >= 0;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.reverse = function<T>(): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => reverseEnumerator(<IEnumerable<T>>this);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.reverse = Enumerable.prototype.reverse;\r\n}","namespace exjs {\r\n    export function round(value: number, digits?: number) {\r\n        digits = digits || 0;\r\n        if (digits === 0)\r\n            return Math.round(value);\r\n        var shift = Math.pow(10, digits);\r\n        return Math.round(value * shift) / shift;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nnamespace exjs {\r\n    function selectEnumerator<T, TResult>(prev: IEnumerable<T>, selector: IProjectionIndexFunc<T, TResult>): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                e.current = selector(t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function selectManyEnumerator<T, TResult>(prev: IEnumerable<T>, selector: (t: T) => any): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var active: IEnumerator<TResult>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!t) t = prev.getEnumerator();\r\n                while (!active || !active.moveNext()) {\r\n                    if (!t.moveNext())\r\n                        return false;\r\n                    active = selectorEnumerator<T, TResult>(selector(t.current));\r\n                }\r\n                e.current = active.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.select = function<T,TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.selectMany = function<T,TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectManyEnumerator<T, TResult>(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.select = Enumerable.prototype.select;\r\n        List.prototype.selectMany = Enumerable.prototype.selectMany;\r\n    }\r\n}","namespace exjs {\r\n    export function selectorEnumerator<T, TResult>(en: IEnumerable<T>): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(arr: T[]): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(obj: any) {\r\n        if (Array.isArray(obj))\r\n            return (<T[]>obj).en().getEnumerator();\r\n        if (obj != null && typeof obj.getEnumerator === \"function\")\r\n            return obj.getEnumerator();\r\n        return null;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function skipEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; i < count; i++) {\r\n                        if (!t.moveNext()) return false;\r\n                    }\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function skipWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; t.moveNext(); i++) {\r\n                        if (!predicate(e.current = t.current, i))\r\n                            return true;\r\n                    }\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.skip = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.skipWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.skip = Enumerable.prototype.skip;\r\n        List.prototype.skipWhile = Enumerable.prototype.skipWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function takeEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                i++;\r\n                if (i > count)\r\n                    return false;\r\n                e.current = undefined;\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function takeWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n\r\n                if (!t.moveNext() || !predicate(t.current, i)) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n                i++;\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.take = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.takeWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.take = Enumerable.prototype.take;\r\n        List.prototype.takeWhile = Enumerable.prototype.takeWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function traverseEnumerator<T>(prev: IEnumerable<T>, selector: (t: T) => IEnumerable<T>): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                while (!t || !t.moveNext()) {\r\n                    if (enstack.length < 1)\r\n                        break;\r\n                    t = enstack.pop();\r\n                }\r\n\r\n                e.current = t == null ? undefined : t.current;\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function traverseUniqueEnumerator<T>(prev: IEnumerable<T>, selector: (t: T)=>IEnumerable<T>, turnstile: (t: T) => boolean): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                do {\r\n                    while (!t || !t.moveNext()) {\r\n                        if (enstack.length < 1)\r\n                            break;\r\n                        t = enstack.pop();\r\n                    }\r\n                    e.current = t == null ? undefined : t.current;\r\n                } while (turnstile(e.current));\r\n\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.traverse = function<T>(selector: any): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => traverseEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.traverseUnique = function<T>(selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n        var existing: T[] = [];\r\n        var e = new Enumerable<T>();\r\n        if (matcher) {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.some(e => matcher(x, e)))\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        } else {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.indexOf(x) > -1)\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        }\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.traverse = Enumerable.prototype.traverse;\r\n        List.prototype.traverseUnique = Enumerable.prototype.traverseUnique;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function unionEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var visited: T[] = [];\r\n        var s: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                if (!s && t.moveNext()) {\r\n                    visited.push(e.current = t.current);\r\n                    return true;\r\n                }\r\n                s = s || en(second).distinct().getEnumerator();\r\n                while (s.moveNext()) {\r\n                    for (var i = 0, hit = false, len = visited.length; i < len && !hit; i++) {\r\n                        hit = comparer(visited[i], s.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = s.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.union = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en:IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => unionEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.union = Enumerable.prototype.union;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function whereEnumerator<T>(prev: IEnumerable<T>, filter: (t: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                var c: T;\r\n                while (t.moveNext()) {\r\n                    if (filter(c = t.current)) {\r\n                        e.current = c;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.where = function<T>(filter: (t: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => whereEnumerator(<IEnumerable<T>>this, filter);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.where = Enumerable.prototype.where;\r\n}","namespace exjs {\r\n    export function en<T>(enu: IEnumerable<T>): IEnumerableEx<T> {\r\n        var x = new Enumerable<T>();\r\n        x.getEnumerator = function (): IEnumerator<T> {\r\n            return wrapEnumerator<T>(enu);\r\n        };\r\n        return <IEnumerableEx<T>>x;\r\n    }\r\n\r\n    function wrapEnumerator<T>(enu: IEnumerable<T>): IEnumerator<T> {\r\n        var wrapped = enu.getEnumerator();\r\n        var x = <IEnumerator<T>>{ current: undefined, moveNext: undefined };\r\n        x.moveNext = function (): boolean {\r\n            if (wrapped.moveNext()) {\r\n                x.current = wrapped.current;\r\n                return true;\r\n            }\r\n            x.current = undefined;\r\n            return false;\r\n        };\r\n        return x;\r\n    }\r\n}\r\nvar ex = exjs.en;","/// <reference path=\"enumerable.ts\" />\r\n\r\nnamespace exjs {\r\n    function zipEnumerator<T, TSecond, TResult>(prev: IEnumerable<T>, second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerator<TResult> {\r\n        var s: IEnumerator<T>;\r\n        var t: IEnumerator<TSecond>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!s) s = prev.getEnumerator();\r\n                if (!t) t = second.getEnumerator();\r\n                e.current = undefined;\r\n                if (!s.moveNext() || !t.moveNext())\r\n                    return false;\r\n                e.current = resultSelector(s.current, t.current);\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.zip = function<T, TSecond,TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TSecond> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => zipEnumerator<T, TSecond, TResult>(<IEnumerable<T>>this, en, resultSelector);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.zip = Enumerable.prototype.zip;\r\n}"]}